generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String      @id @default(uuid()) @db.Uuid()
  firstName  String?     @map("first_name") @db.VarChar(255)
  lastName   String      @map("last_name") @db.VarChar(255)
  middleName String?     @map("middle_name") @db.VarChar(255)
  phones     UserPhone[]
  emails     UserEmail[]
  isActive   Boolean     @default(false) @map("is_active") @db.Boolean()
  username   String      @unique @db.VarChar(255)
  password   String      @db.VarChar(255)
  userRoles  UserRole[]
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("users")
}

model Role {
  id        String     @id @default(uuid()) @db.Uuid()
  name      String     @unique @db.VarChar(255)
  slug      String     @unique @db.VarChar(255)
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime   @updatedAt @map("updated_at") @db.Timestamptz()
  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(uuid()) @db.Uuid()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @map("user_id") @db.Uuid()
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId    String   @map("role_id") @db.Uuid()
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("user_roles")
}

model UserPhone {
  id        String   @id @default(uuid()) @db.Uuid()
  phone     String   @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid()

  @@unique([phone, userId])
  @@map("user_phones")
}

model UserEmail {
  id        String   @id @default(uuid()) @db.Uuid()
  email     String   @db.VarChar(150)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid()

  @@unique([email, userId])
  @@map("user_emails")
}
